#!/bin/sh
#
# Resource script for generic-script umm script
#
# Description:  Manages generic-script as an OCF resource in
#               an High Availability setup.
#
# Generic Script OCF script's Author: Russki
# Rsync OCF script's Author: Dhairesh Oza <odhairesh@novell.com>
# License: GNU General Public License (GPL)
#
#
#	usage: $0 {start|stop|monitor|validate-all|meta-data}
#
#	The "start" arg starts generic-script.
#
#	The "stop" arg stops it.
#
# OCF parameters:
# OCF_RESKEY_script
# OCF_RESKEY_startargs
# OCF_RESKEY_stopargs
# OCF_RESKEY_startandstop
#
##########################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/resource.d/heartbeat}
. ${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs

USAGE="Usage: $0 {start|stop|monitor|validate-all|meta-data}";

##########################################################################

usage()
{
	echo $USAGE >&2
}

meta_data()
{
cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="generic-script">
<version>1.0</version>
<longdesc lang="en">
This script manages generic-script script
</longdesc>
<shortdesc lang="en">Manages the generic-script script</shortdesc>

<parameters>

<parameter name="script">
<longdesc lang="en">
The full path to the script
For example, "/usr/sbin/generic-script" will be run
</longdesc>
<shortdesc lang="en">Name of the script we will be executing</shortdesc>
<content type="string" default=""/>
</parameter>

<parameter name="startargs">
<longdesc lang="en">
The generic-script's start parameters if needed
For example, "--enable --fun 10"
If it's not supplied, it will be set to nothing
</longdesc>
<shortdesc lang="en">Parameters we will execute on start of the generic-script</shortdesc>
<content type="string" default=""/>
</parameter>

<parameter name="stopargs">
<longdesc lang="en">
The generic-script's stop parameters if needed
For example, "--disable --fun 0"
If it's not supplied, it will be set to nothing
</longdesc>
<shortdesc lang="en">Parameters we will execute on stop of the generic-script</shortdesc>
<content type="string" default=""/>
</parameter>

<parameter name="startandstop">
<longdesc lang="en">
The generic-script will only execute on start by default
If startandstop is set to "1", or stopargs is set, the script
will be executed when service is stopped as well
</longdesc>
<shortdesc lang="en">Whether we execute the script when stopping the resource</shortdesc>
<content type="string" default=""/>
</parameter>

</parameters>

<actions>
<action name="start" timeout="20s"/>
<action name="stop" timeout="20s"/>
<action name="monitor" depth="0" timeout="20s" interval="60s" />
<action name="validate-all" timeout="20s"/>
<action name="meta-data"  timeout="5s"/>
</actions>
</resource-agent>
END
exit $OCF_SUCCESS
}

get_params()
{
	if [ -n "$OCF_RESKEY_script" ]; then
		SCRIPT=${OCF_RESKEY_script}
	else
		ocf_log info "You need to specify which script to run"
		return $OCF_ERR_ARGS
	fi
	if [ -n "$OCF_RESKEY_startargs" ]; then
		STARTARG=${OCF_RESKEY_startargs}
	fi
	if [ -n "$OCF_RESKEY_stopargs" ]; then
		STOPARG=${OCF_RESKEY_stopargs}
	fi
	if [ -n "$OCF_RESKEY_startandstop" ]; then
		STARTANDSTOP=${OCF_RESKEY_startandstop}
	fi
	echo "Going to do $SCRIPT $STARTARG $STOPARG $STARTANDSTOP " >> /tmp/params.txt
}

generic_script_monitor()
{
	echo "POOP and $SCRIPT and $STARTARG and $STOPARG" >> /tmp/monitor.txt
	# let's see if the file is there and executable
	if [ -n $SCRIPT ]; then
		# well there's really nothing else to do, let's return success
		echo "MONITOR INSIDE IF and $SCRIPT and $STARTARG and $STOPARG" >> /tmp/monitor.txt
		return $OCF_SUCCESS
	else
		# file is not there, let's return an error
		echo "MONITOR INSIDE ELSE and $SCRIPT and $STARTARG and $STOPARG" >> /tmp/monitor.txt
		ocf_log info "$SCRIPT is does not exist or isn't executable"
		return $OCF_ERR_ARGS
	fi

	# generic_daemon is not running
	ocf_log info "$OCF_RESKEY_name script is not running"
	return $OCF_NOT_RUNNING

}

generic_script_start()
{
	echo "1) Going to do $COMMAND $STARTARG " >> /tmp/start.txt
	# check if the script is there
	generic_script_status
	retVal=$?
	if [ $retVal -eq $OCF_NOT_RUNNING ]; then
		ocf_log err "$SCRIPT does not exist or it is not executable."
		exit $OCF_ERR_GENERIC
	fi

	if [ -x "$SCRIPT" ]; then
		COMMAND=$SCRIPT
	else
		ocf_log err "Error. Script is unknown."
		exit $OCF_ERR_GENERIC
	fi

	echo "2) Going to do $COMMAND $STARTARG " >> /tmp/start.txt
	$($COMMAND $STARTARG)
	if [ $? -ne 0 ]; then
		ocf_log err "Error. $OCF_RESKEY_name script returned error $?."
		exit $OCF_ERR_GENERIC
	fi

	ocf_log info "Executed $OCF_RESKEY_name script in the START mode."
	exit $OCF_SUCCESS
}


generic_script_stop()
{
	# check if the script is there
	generic_script_status
	retVal=$?
	if [ $retVal -eq $OCF_NOT_RUNNING ]; then
		ocf_log err "$SCRIPT does not exist or it is not executable."
		exit $OCF_ERR_GENERIC
	fi

	if [ -x "$SCRIPT" ]; then
		COMMAND=$SCRIPT
	else
		ocf_log err "Error. Script is unknown."
		exit $OCF_ERR_GENERIC
	fi

	echo "Check if we should be stopping $COMMAND $STOPARG " >> /tmp/stop.txt
	# If both of these are not present, we're not supposed to run
	if [[ -z $STARTANDSTOP && -z $STOPARG ]]; then
		exit $OCF_SUCCESS
	fi
	echo "Inside Stop Going to do $COMMAND $STOPARG " >> /tmp/stop.txt

	${$COMMAND $STOPARG}
	if [ $? -ne 0 ]; then
		ocf_log err "Error. $OCF_RESKEY_name script returned error $?."
		exit $OCF_ERR_GENERIC
	fi

	ocf_log info "Executed $OCF_RESKEY_name script in the STOP mode."
	exit $OCF_SUCCESS
}

generic_script_validate_all()
{
	echo "BALLS" >> /tmp/validate.txt
	if [ ! -n "$SCRIPT" -a ! -x "$SCRIPT" ]; then
		ocf_log err "Binary path to script $SCRIPT does not exist."
		exit $OCF_ERR_ARGS
	fi

	return $OCF_SUCCESS
}


#
# Main
#

if [ $# -ne 1 ]; then
	usage
	exit $OCF_ERR_ARGS
fi

case $1 in
	start)	echo POOP >>/tmp/start.txt
		get_params
		generic_script_start
		;;

	stop)	echo POOP >>/tmp/stop.txt
		get_params
		generic_script_stop
		;;

	monitor)echo POOP >>/tmp/monitor.txt
		get_params
		generic_script_monitor
		;;

	validate-all)	echo POOP >>/tmp/validate.txt
			get_params
			generic_script_validate_all
			;;

	meta-data)	meta_data
			;;

	usage)	usage
		exit $OCF_SUCCESS
		;;

	*)	usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac

